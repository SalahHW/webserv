Refactor: Remove EpollManagement.cpp and integrate its functionalities into ServerHandler; update ClientIn to align with serverList change from map to vector

This commit represents a comprehensive refactoring of the codebase, aiming to enhance maintainability, coherence, and overall performance. We have completely removed EpollManagement.cpp from the project. The critical functionalities that were previously housed within the EpollManagement class—such as EpollInit(), addToEpoll(), startToListen(), and handleClientData()—have been meticulously re-implemented within the ServerHandler class. This strategic consolidation is intended to centralize the event handling logic, thereby simplifying the architecture and making it more intuitive for future development and debugging efforts.

The decision to exclude the setters and getters during this migration to ServerHandler is deliberate and stems from a commitment to the principles of encapsulation and data hiding. By not providing these accessors, we ensure that the internal state of ServerHandler remains protected from unintended external modifications. This approach reduces the risk of side effects and potential bugs that can arise from uncontrolled state changes, thereby enhancing the robustness and reliability of the system.

Additionally, the ClientIn class has been updated to accommodate significant changes in the data structure used within ServerHandler. Specifically, the serverList, which was previously implemented as a map, has been transformed into a vector. This change is justified by several key factors. Firstly, a vector offers better performance for sequential access patterns, which aligns with our typical use case where servers are iterated in order. Secondly, the vector simplifies the data structure, reducing complexity and overhead associated with map operations, especially when key-based access is not a primary requirement.

The modification of ClientIn involved adjusting all interactions with serverList to be compatible with the new vector structure. This includes refactoring loops and access methods to utilize index-based operations and standard vector functionalities. The result is cleaner, more efficient code that is easier to read and maintain.

Furthermore, this refactoring provides an opportunity to reinforce best practices in object-oriented programming within our codebase. By centralizing event handling within ServerHandler, we promote a clearer separation of concerns and reduce the fragmentation of related functionalities across multiple classes. This consolidation facilitates a more straightforward understanding of the system's flow and enhances the ability to implement future features or modifications with reduced complexity.

The emphasis on encapsulation by omitting setters and getters is a conscious design choice to prevent external classes from altering the internal state of ServerHandler arbitrarily. This restriction encourages the use of well-defined interfaces for any necessary interactions, promoting safer and more predictable code behavior. It also aids in preserving the integrity of the data managed by ServerHandler, ensuring that any state changes occur in a controlled and intentional manner.

The transition from a map to a vector for serverList also carries performance implications. Vectors provide contiguous memory allocation, which can lead to better cache performance and faster iteration times, especially when dealing with large datasets. This change is expected to yield performance benefits in scenarios where rapid traversal of the server list is required.

In the process of implementing these changes, we conducted a thorough review of the codebase to identify all areas impacted by the removal of EpollManagement.cpp and the alteration of serverList. This included updating method calls, adjusting data structures, and ensuring compatibility with existing functionalities. We also updated documentation and comments to reflect the new architecture, aiding future developers in understanding the rationale behind these decisions.

In summary, this refactoring is a significant step toward optimizing our application's architecture. By unifying event handling within ServerHandler and streamlining our data structures, we set the stage for improved performance and easier scalability. These changes are anticipated to facilitate more efficient development workflows and contribute to the long-term sustainability of the codebase.

It is recommended that comprehensive testing be performed to validate the functionality of the updated system. All team members should familiarize themselves with the new structure to fully leverage the improvements made. Feedback on the refactoring is welcome to ensure that the changes meet the project's goals and contribute positively to our development practices.
